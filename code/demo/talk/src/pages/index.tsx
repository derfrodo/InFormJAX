"use client";

import Head from "next/head";

import {
  CreateCreateUserForm,
  createDefaultCreateUserInput,
} from "@/Features/User/CreateUser.generated";
import {
  UpdateUpdateUserForm,
  UpdateUserTable,
} from "@/Features/User/UpdateUser.generated";
import { mutateCreateUser, mutateUpdateUser, queryUsers } from "@/Features/User/queries/graphqlQueries";
import { CreateUserInput, User } from "@/api/generated-types/graphql";
import { getClient } from "@/gql/getApolloClient";
import { useMutation, useQuery } from "@apollo/client";
import { AppContext } from "next/app";
import { useState } from "react";
// import { CreateCreateContactForm, createDefaultCreateContactInput } from "@/Features/Contact/CreateContact.generated";
// import { queryContacts, mutateCreateContact } from "@/Features/Contact/queries/graphqlQueries";
// import { UpdateContactTable } from "@/Features/Contact/UpdateContact.generated";

export async function getServerSideProps(context: AppContext["ctx"]) {
  const c = getClient(null, true);

  // caching
  await c.query({
    query: queryUsers,
  });

  return {
    props: { state: c.extract() }, // will be passed to the page component as props
  };
}

export default function AppComponent() {
  const { data, client, refetch } = useQuery(queryUsers);
  const [createUser] = useMutation(mutateCreateUser);

  const [defaultCreateUser, setCreateUser] = useState<CreateUserInput>(
    createDefaultCreateUserInput()
  );
  console.log(data, { e: client.extract() });

  const [updateUser, setUpdateUser] = useState<User | null>(null);
  const [doUpdateUser] = useMutation(mutateUpdateUser);


  
  // const { data: contactData,refetch: refetchContacts } = useQuery(queryContacts);
  // const [createContact] = useMutation(mutateCreateContact);

  // const [defaultCreateContact, setCreateContact] = useState(
  //   createDefaultCreateContactInput()
  // );

  return (
    <>
      <Head>
        <title>JAX Mit Materna</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div>
          <h2>Users</h2>
          <CreateCreateUserForm
            item={defaultCreateUser}
            title="Create User"
            onSave={async (next) => {
              await createUser({ variables: { input: next } });
              await refetch();
              setUpdateUser(null);
              setCreateUser(createDefaultCreateUserInput());
            }}
          />
          {updateUser ? (
            <>
              <UpdateUpdateUserForm
                title="Edit User"
                item={updateUser}
                onSave={async (user) => {
                  await doUpdateUser({ variables: { input: user } });
                  await refetch();
                  setUpdateUser(null);
                }}
              />
            </>
          ) : (
            <>
              <h3>Show Users</h3>
              <UpdateUserTable
                items={data?.users ?? []}
                onRowClicked={(user) => setUpdateUser(user)}
              />
            </>
          )}
          {/* <h2>Contact</h2>
          
          <CreateCreateContactForm
            item={defaultCreateContact}
            title="Create Contact"
            onSave={async (next) => {
              await createContact({ variables: { input: next } });
              setCreateContact(createDefaultCreateContactInput());
              refetchContacts();
            }}
          />
          <>
            <h3>Show Contacts</h3>
            <UpdateContactTable
              items={contactData?.contacts ?? []}
              onRowClicked={() => {}}
            />
          </> */}

        </div>
      </main>
    </>
  );
}
