"use client";

import Head from "next/head";

import { getClient } from "@/gql/getApolloClient";
import { useMutation, useQuery } from "@apollo/client";
import { AppContext } from "next/app";
import { mutateCreateUser, mutateUpdateUser, queryUsers } from "@/Features/User/queries/queryUsers";
import { CreateCreateUserForm, createDefaultCreateUserInput } from "@/Features/User/CreateUser.generated";
import { useMemo, useState } from "react";
import { UpdateUpdateUserForm, UpdateUserTable } from "@/Features/User/UpdateUser.generated";
import { User } from "@/api/generated-types/graphql";

export async function getServerSideProps(context: AppContext["ctx"]) {
  const c = getClient(null, true);

  // caching
  await c.query({
    query: queryUsers,
  });

  return {
    props: { state: c.extract() }, // will be passed to the page component as props
  };
}

export default function AppComponent() {
  const { data, client, refetch } = useQuery(queryUsers);
  const [createUser] = useMutation(mutateCreateUser);

  const defaultUser = useMemo(() => createDefaultCreateUserInput(), []);
  console.log(data, { e: client.extract() })


  const [updateUser, setUpdateUser] = useState<User | null>(null);
  const [doUpdateUser] = useMutation(mutateUpdateUser);

  return (
    <>
      <Head>
        <title>JAX Mit Materna</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div>
          <h2>Users</h2>
          <h3>Create User</h3>
          <CreateCreateUserForm item={defaultUser} onSave={async next => {
            await createUser({ variables: { input: next } });
            await refetch();
            setUpdateUser(null)
          }} />
          {updateUser ?
            <>
              <h3>Edit User</h3>
              <UpdateUpdateUserForm item={updateUser} onSave={
                async user => {
                  await doUpdateUser({ variables: { input: user } });
                  await refetch();
                  setUpdateUser(null)
                }} /></> :
            <>
              <h3>Show Users</h3>
              <UpdateUserTable items={data?.users ?? []} onRowClicked={user => setUpdateUser(user)} />
            </>
          }
          <h2>Contact</h2>
        </div>
      </main>
    </>
  );
}
