"use client";

import Head from "next/head";

import { WheelPartArrayElementTable } from "@/Configuration/WheelParts/WheelPartArrayElement.generated";

import { getwheels } from "@/Wheel/gql/getwheels";
import { toggleDisableWheelValue } from "@/Wheel/gql/toggleDisableWheelValue";
import { getClient } from "@/gql/getApolloClient";
import { useMutation, useQuery } from "@apollo/client";
import { AppContext } from "next/app";
import Link from "next/link";
import { UpdateDisplaySettingsForm } from "@/Configuration/DisplaySettings/DisplaySettings.generated";
import { queryDisplaysettings } from "@/Configuration/mutations/queryDisplaysetting";
import { updateDisplaysettings } from "@/Configuration/mutations/updateDisplaySettings";
import { UpdateWheelSettingsForm } from "@/Configuration/WheelSettings/WheelSettings.generated";
import { queryWheelSettings } from "@/Configuration/mutations/queryWheelSettings";
import { updateWheelSettings } from "@/Configuration/mutations/updateWheelSettings";
import App from "@/Wheel/App";

export async function getServerSideProps(context: AppContext["ctx"]) {
  const c = getClient(null, true);
  // caching
  await c.query({ query: getwheels });
  await c.query({ query: queryDisplaysettings });

  return {
    props: { state: c.extract() }, // will be passed to the page component as props
  };
}

export default function WheelParts() {
  const { data } = useQuery(getwheels);
  const [toggleDisabled] = useMutation(toggleDisableWheelValue);
  const { data: displaySettings } = useQuery(queryDisplaysettings);
  const [updateDisplaySettings] = useMutation(updateDisplaysettings);
  const { data: wheelSettings } = useQuery(queryWheelSettings);
  const [updateWheelsettings] = useMutation(updateWheelSettings);
  const { data: values } = useQuery(getwheels, {});
  return (
    <>
      <Head>
        <title>JAX Mit Materna - Konfiguration</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{ padding: 16, position: "relative" }}>
        <div
          style={{
            position: "absolute",
            top: 0,
            left: 0,
            height: "100vh",
            width: "100vw",
            overflow: "scroll",
            opacity: 0.05,
            pointerEvents: "none",
          }}
        >
          {values?.wheelParts ? (
            <App values={values.wheelParts.filter((v) => !v.disabled)} />
          ) : (
            <></>
          )}
        </div>
        <div
          style={{
            position: "absolute",
            top: 0,
            left: 0,
            height: "calc(100vh - 32px)",
            width: "calc(100vw - 32px)",
            overflow: "auto",
            padding: 16,
          }}
        >
          <div
            style={{
              display: "flex",
            }}
          >
            <div
              style={{
                display: "flex",
                alignItems: "flex-end",
                flexDirection: "column",
              }}
            >
              <h1>‚öôÔ∏è Einstellungen</h1>
              <div style={{ marginBottom: 12, marginTop: -24 }}>
                <Link href="/">üè† Zur√ºck zum Rad</Link>
              </div>
            </div>
            <div style={{ flex: 1 }} />
          </div>

          <div style={{ display: "flex", gap: 32 }}>
            <div style={{ flex: 1 }}>
              {wheelSettings?.wheelSettings ? (
                <UpdateWheelSettingsForm
                  title={"Einstellungen am Rad"}
                  item={wheelSettings?.wheelSettings}
                  onSave={(next) => {
                    updateWheelsettings({ variables: { input: next } });
                  }}
                />
              ) : (
                <></>
              )}

              {displaySettings?.displaySettings ? (
                <UpdateDisplaySettingsForm
                  title={"Anzeigeeinstellungen"}
                  item={displaySettings.displaySettings}
                  onSave={(next) => {
                    const { __typename, ...rest } = next;
                    updateDisplaySettings({ variables: { input: rest } });
                  }}
                />
              ) : (
                <></>
              )}
            </div>
            <div style={{ flex: 1 }}>
              <h2>Abschnitte</h2>
              <WheelPartArrayElementTable
                onRowClicked={async (item) => {
                  await toggleDisabled({ variables: { name: item.name } });
                }}
                items={data?.wheelParts || []}
              />
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
