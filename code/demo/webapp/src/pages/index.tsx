"use client";

import Head from "next/head";
import App from "@/Wheel/App";
import { getWheelValues } from "@/Wheel/constants/WHEELVALUES";
import { WheelValue } from "@/Wheel/types/WheelValue";

import { graphql } from "@/gql/generated-client/gql";
import { useQuery } from "@apollo/client";
import { getClient } from "@/gql/getApolloClient";
import { AppContext } from "next/app";

export async function getServerSideProps(context: AppContext["ctx"]) {
  const c = getClient();

  const dat = await c.query({ query: getme });
  const dat2 = await c.query({ query: getwheels });
  console.log({ dat, e: c.extract() });

  const data = getWheelValues();

  return {
    props: { data, state: c.extract() }, // will be passed to the page component as props
  };
}

const getwheels = graphql(`
  query wp {
    wheelParts {
      name
    }
  }
`);

const getme = graphql(/* GraphQL */ `
  query query {
    as: firstname
  }
`);

export default function Home(props: { data: WheelValue[] }) {
  const { data } = props;

  // const {data:d, loading, called} = useQuery(getme,{context:{revalidate:5}});
  const { data: d, loading, called, client } = useQuery(getme);
  console.log({ d, loading, called, state: client.extract() });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <span>{d?.as}</span>
        <App values={data} />
      </main>
    </>
  );
}
